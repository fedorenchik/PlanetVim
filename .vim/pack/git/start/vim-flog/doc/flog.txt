*flog.txt*  A branch viewer for fugitive
Flog                                                                    *flog*

Author:  Roger Bongers <https://github.com/rbong>
License: Same terms as Vim itself (see |license|)

==============================================================================
INTRODUCTION                                                      *flog-intro*

Flog is a lightweight branch viewer for vim. Flog provides a wrapper to "git
log --graph" that can be run from any git repository. It provides several
helpful commands and bindings to interact with the graph. Flog integrates with
|fugitive|. See "git log --help" and |fugitive| for more details.

==============================================================================
COMMANDS                                                       *flog-commands*

:Flog                                                                  *:Flog*

  Open the log graph in a new tab. This command can be run from any file in a
  git repository. Any |fugitive-commands| can be run from the buffer.

  When opened in visual mode, the currently selected range and filename is
  passed to "-limit=".

  The following options are supported:

                                                                   *:Flog-all*
  -all                  Enable the "--all" argument by default.

                                                                *:Flog-bisect*
  -bisect               Enable the "--bisect" argument by default.

                                                             *:Flog-no-merges*
  -no-merges            Enable the "--no-merges" argument by default.

                                                                *:Flog-reflog*
  -reflog               Enable the "--reflog" argument by default.

                                                               *:Flog-reverse*
  -reverse              Enable the "--reverse" argument by default.

                                                              *:Flog-no-graph*
  -no-graph             Disable the "--graph" argument by default.

                                                              *:Flog-no-patch*
  -no-patch             Enable the "--no-patch" argument by default.

                                                                  *:Flog-skip*
  -skip=<number>        Passed to "--skip", skipping that number of commits by
                        default.

                                                             *:Flog-max-count*
  -max-count=<number>   Passed to "--max-count", limiting to that number of
                        commits by default.

                                                              *:Flog-open-cmd*
  -open-cmd=<cmd>       The command to use to open the window containing the
                        graph. Must give initial focus to the window. Defaults
                        to |tabedit|.

                                                                *:Flog-format*
  -format=<format>      A format specifier to pass to "--pretty=format:".
                        Multiline formats are supported.

                                                                  *:Flog-date*
  -date=<date>          The date format to pass to "--date=". Currently,
                        "short" and "iso8601" are supported.

                                                                *:Flog-search*
  -search=<rev>         A regex pattern to pass to "--grep=".

                                                          *:Flog-patch-search*
  -patch-search=<rev>   A regex pattern to pass to "-G".

                                                                *:Flog-author*
  -author=<author>      An author name to pass to "--author=".

                                                                 *:Flog-limit*
  -limit=<limit>        A limit to pass to "-L". This will restrict commit
                        history to the specified file/lines. This disables
                        some options.

                        Because it uses the "git log -L" argument, this option
                        will display a patch inline to the graph window. This
                        can be toggled with "gp".

                        Instead of manually specifying this argument, you can
                        also use a range or visually select some lines and
                        type ":Flog<CR>".

                                                                  *:Flog-sort*
  -sort=<sort>          Sort by one of <type>, where type is in "date",
                        "author", or "topo". These correspond to the options
                        "--date-order", "--author-order", and "--topo-order"
                        respectfully.

                                                                   *:Flog-rev*
  -rev=<rev>            The git revision to pass to the log command. Can be
                        specified more than once. When "-limit=" is specified,
                        only the first revision is used.

                                                                  *:Flog-path*
  -path=<path>          A path to pass to the log command. This option can be
                        specified multiple times for multiple paths.

                                                              *:Flog-raw-args*
  -raw-args=<args>      Additional args to pass to "git log --graph". No args
                        passed in using this option are guaranteed to work.
                        Can be specified multiple times, which will be
                        combined together.

                                                                     *:Flog--*
  --                    Parse the rest of the arguments as if they were passed
                        to -raw-args. Does not require escaping spaces.

:Flogsplit                                                        *:Flogsplit*

  Open the log graph in a split. Supports |<mods>|. Behaves the same as
  |:Flog| otherwise.

:Flogsplitcommit                                            *:Flogsplitcommit*

  Open a commit under the cursor using |:Gsplit| in a |flog-temp-window|. Can
  only be run in the |:Flog| window.

  Sets |flog-'!|.

:Floggit                                                            *:Floggit*

  Open a git command via |:Git|.

  Revision, file, and option completion is available for this command.

  While in a |:Flog| window, completion is available for the current line or
  range.

:Floggit!                                                          *:Floggit!*

  Same as |:Floggit|, but open the command using a |flog-temp-window|.

:Flogsetargs                                                    *:Flogsetargs*

  Update the arguments passed to |:Flog| or |:Flogsplit|. Can only be run in a
  |:Flog| window. Merges new arguments with the current arguments.

:Flogsetargs!                                                  *:Flogsetargs!*

  Same as |:Flogsetargs|, but overwrite all of the current arguments instead
  of updating them.

:Flogjump                                                          *:Flogjump*

  Jump to the ref name given by the arguments. Must be a ref name currently in
  the graph.

  Can only be run in a |:Flog| window.

  Supports ref name completion.

  Sets |flog-''| to the last commit under the cursor.

==============================================================================
MAPPINGS                                                       *flog-mappings*

All mappings are available only from the |:Flog| window.

------------------------------------------------------------------------------
MISC. MAPPINGS                                            *flog-misc-mappings*

                                                            *<Plug>(FlogHelp)*
g?                                                                   *flog-g?*

  Jump to this list of mappings in help.

                                               *<Plug>(FlogVSplitCommitRight)*
<CR>                                                               *flog-<CR>*

  Open the commit under the cursor in a temporary window.
  Sets |flog-'!| to the commit under the cursor.

                                           *<Plug>(FlogVSplitCommitRightPath)*
<Tab>                                                             *flog-<Tab>*

  Same as |flog-<CR>|, but use the "-path" argument to only show the diff for
  the currently selected paths.

  Sets |flog-'!| to the commit under the cursor.

                                                 *<Plug>(FlogVDiffSplitRight)*
dd                                                                   *flog-dd*
dv                                                                   *flog-dv*

  In normal mode, open a diff in a temporary window comparing the commit under
  the cursor with the current commit.

  Also sets |flog-'!| to the commit under the cursor in normal mode.

  In visual mode, open a diff in a temporary window comparing the commits at
  the top and bottom of the visual selection.

                                            *<Plug>(FlogVDiffSplitPathsRight)*
dp                                                                   *flog-dp*
DD                                                                   *flog-DD*
DV                                                                   *flog-DV*

  Same as |flog-dd|, but use the "-path" argument to only show the diff for
  the currently selected paths.

                                       *<Plug>(FlogVDiffSplitLastCommitRight)*
d!                                                                   *flog-d!*

  Diff the commit under the cursor and the last used commit.
  See also |flog-'!|.

                                  *<Plug>(FlogVDiffSplitLastCommitPathsRight)*
D!                                                                   *flog-D!*

  Same as |flog-d!|, but use the "-path" argument to only show the diff for
  the currently selected paths.

                                                     *<Plug>(FlogCloseTmpWin)*
dq                                                                   *flog-dq*

  Close all temporary windows.

                                                            *<Plug>(FlogYank)*
y<C-G>                                                           *flog-y<C-G>*

  Copy the short commit hash under the current line to a register. Accepts a
  count.

                                                             *<Plug>(FlogGit)*
git                                                                 *flog-git*

  Enter in the characters ":Floggit" from normal or visual mode in order to
  quickly begin a |:Floggit| command.

                                                            *<Plug>(FlogQuit)*
gq                                                                   *flog-gq*
ZZ                                                                   *flog-ZZ*

  Quit Flog.

------------------------------------------------------------------------------
NAVIGATION MAPPINGS                                 *flog-navigation-mappings*

                                                *<Plug>(FlogVNextCommitRight)*
<C-N>                                                            *flog-CTRL-N*
)                                                                     *flog-)*

  Jump to the next commit and open it in a temporary window. Accepts a count.

  Sets |flog-''| to the last commit under the cursor.
  Sets |flog-'!| to the new commit under the cursor.

                                                *<Plug>(FlogVPrevCommitRight)*
<C-P>                                                            *flog-CTRL-P*
(                                                                     *flog-(*

  Same as |flog-<C-N>|, but jump backwards.

                                                   *<Plug>(FlogVNextRefRight)*
]r                                                                   *flog-]r*

  Jump to the next commit with a ref name and open it in a temporary window.
  Accepts a count.

  Sets |flog-''| to the last commit under the cursor.
  Sets |flog-'!| to the new commit under the cursor.

                                                   *<Plug>(FlogVPrevRefRight)*
[r                                                                   *flog-[r*

  Same as |flog-]r|, but jump backwards.

                                                       *<Plug>(FlogSkipAhead)*
]]                                                                   *flog-]]*

  Go forward in the commit history by "--max-count" commits, if that argument
  is set. Accepts a count.

                                                        *<Plug>(FlogSkipBack)*
[[                                                                   *flog-[[*

  Same as |flog-]]|, but go backwards.

                                                         *<Plug>(FlogSetSkip)*
go                                                                   *flog-go*

  Skip to the commit given by the count, or 0 if no count is given.

                                                   *<Plug>(FlogSetCommitMark)*
m{a-zA-Z'}                                                            *flog-m*

  Mark the current commit under the cursor.
  See also |flog-commit-marks|.

                                                *<Plug>(FlogJumpToCommitMark)*
'{a-zA-Z'}                                                            *flog-'*

  Jump to the marked commit.
  Sets |flog-''| to the last commit under the cursor.
  See also |flog-commit-marks|.

------------------------------------------------------------------------------
ARGUMENT MODIFIER MAPPINGS                            *flog-argument-mappings*

                                                       *<Plug>(FlogToggleAll)*
a                                                                     *flog-a*

  Toggle the "--all" argument.

                                                    *<Plug>(FlogToggleBisect)*
gb                                                                   *flog-gb*

  Toggle the "--bisect" argument.

                                                  *<Plug>(FlogToggleNoMerges)*
gm                                                                   *flog-gm*

  Toggle the "--no-merges" argument.

                                                    *<Plug>(FlogToggleReflog)*
gr                                                                   *flog-gr*

  Toggle the "--reflog" argument.

                                                   *<Plug>(FlogToggleNoGraph)*
gx                                                                   *flog-gx*

  Toggle the "--graph" argument.

                                                   *<Plug>(FlogToggleNoPatch)*
gp                                                                   *flog-gp*

  Toggle the "--no-patch" argument. Useful while the "-limit" option is
  specified.

gss                                                    *<Plug>(FlogCycleSort)*
                                                                    *flog-gss*

  Cycle through the different sort options; "--date-order",
  "--author-date-order", and "--topo-order".

gsd                                                     *<Plug>(FlogSortDate)*
                                                                    *flog-gsd*

  Set the "--date-order" option. Conflicts with other sort options.

gsa                                                   *<Plug>(FlogSortAuthor)*
                                                                    *flog-gsa*

  Set the "--author-date-order" option. Conflicts with other sort options.

gst                                                     *<plug>(FlogSortTopo)*
                                                                    *flog-gst*

  Set the "--topo-order" option. Conflicts with other sort options.

gsr                                                *<Plug>(FlogToggleReverse)*
                                                                    *flog-gsr*

  Toggle the "--reverse" argument. Does not conflict with other sort options.
  Mnemonic: "sort reverse".

                                                          *<Plug>(FlogUpdate)*
u                                                                     *flog-u*

  Update/reload the graph window.

                                                          *<Plug>(FlogSearch)*
g/                                                                   *flog-g/*

  Open the command line with ":Flogsetargs -search=".

                                                     *<Plug>(FlogPatchSearch)*
g\                                                                   *flog-g\*

  Open the command line with ":Flogsetargs -patch-search=".

------------------------------------------------------------------------------
COMMIT AND BRANCH MAPPINGS                              *flog-commit-mappings*

                                                           *<Plug>(FlogFixup)*
cf                                                                   *flog-cf*

  Create a "--fixup" commit for the commit under the cursor.

                                                     *<Plug>(FlogFixupRebase)*
cF                                                                   *flog-cF*

  Same as |flog-cf|, but immediately perform a "rebase --autosquash".

                                                          *<Plug>(FlogSquash)*
cs                                                                   *flog-cs*

  Create a "--squash" commit for the commit under the cursor.

                                                    *<Plug>(FlogSquashRebase)*
cS                                                                   *flog-cS*

  Same as |flog-cs|, but immediately perform a "rebase --autosquash".

                                                      *<Plug>(FlogSquashEdit)*

cA                                                                   *flog-cA*

  Same as |flog-cs|, but edit the commit message.

                                                          *<Plug>(FlogRevert)*
crc                                                                 *flog-crc*

  Revert the commit under the cursor. In visual mode, revert all selected
  commits.

                                                    *<Plug>(FlogRevertNoEdit)*
crn                                                                 *flog-crn*

  Same as |flog-crc|, but use the "--no-edit" flag.

                                                        *<Plug>(FlogCheckout)*
coo                                                                 *flog-coo*

  Checkout the commit under the cursor.

                                                  *<Plug>(FlogCheckoutBranch)*
cob                                                                 *flog-cob*

  Checkout the first branch name under the cursor, prioritizing local
  branches, or use the hash if there is no branch name.

                                             *<Plug>(FlogCheckoutLocalBranch)*
cot                                                                 *flog-cot*

  Checkout the first local branch name under the cursor, or checkout the first
  upstream branch with the remote name trimmed from the ref, causing it to be
  tracked locally.

  If no branch name was found do nothing.

                                                       *<Plug>(FlogGitCommit)*
c<Space>                                                       *flog-c<Space>*

  Start a command line with ":Floggit commit ".

                                                       *<Plug>(FlogGitRevert)*
cr<Space>                                                     *flog-cr<space>*

  Start a command line with ":Floggit revert ".

                                                        *<Plug>(FlogGitMerge)*
cm<Space>                                                     *flog-cm<space>*

  Start a command line with ":Floggit merge ".

                                                     *<Plug>(FlogGitCheckout)*
co<Space>                                                     *flog-co<Space>*

  Start a command line with ":Floggit checkout ".

                                                       *<Plug>(FlogGitBranch)*
cb<Space>                                                     *flog-cb<Space>*

  Start a command line with ":Floggit branch ".

------------------------------------------------------------------------------
REBASE MAPPINGS                                         *flog-rebase-mappings*

                                               *<Plug>(FlogRebaseInteractive)*
ri                                                                   *flog-ri*

  Start an interactive rebase using the root of the commit under the cursor,
  if it is available.

                                     *<Plug>(FlogRebaseInteractiveAutosquash)*
rf                                                                   *flog-rf*

  Same as |flog-ri|, but use the "--autosquash" argument if it is available.


                                       *<Plug>(FlogRebaseInteractiveUpstream)*
ru                                                                   *flog-ru*

  Perform an interactive rebase against "@{upstream}".

                                           *<Plug>(FlogRebaseInteractivePush)*
rp                                                                   *flog-rp*

  Perform an interactive rebase against "@{push}".

                                                  *<Plug>(FlogRebaseContinue)*
rr                                                                   *flog-rr*

  Run "git rebase --continue".

                                                      *<Plug>(FlogRebaseSkip)*
rs                                                                   *flog-rs*

  Run "git rebase --skip".

                                                     *<Plug>(FlogRebaseAbort)*
ra                                                                   *flog-ra*

  Run "git rebase --abort".

                                                  *<Plug>(FlogRebaseEditTodo)*
re                                                                   *flog-re*

  Run "git rebase --edit-todo".

                                         *<Plug>(FlogRebaseInteractiveReword)*
rw                                                                   *flog-rw*

  Start an interactive rebase with the commit under the cursor set to
  "reword".

                                           *<Plug>(FlogRebaseInteractiveEdit)*
rm                                                                   *flog-rm*

  Start an interactive rebase with the commit under the cursor set to "edit".

                                           *<Plug>(FlogRebaseInteractiveDrop)*
rd                                                                   *flog-rd*

  Start an interactive rebase with the commit under the cursor set to "drop".

                                                       *<Plug>(FlogGitRebase)*
r<Space>                                                       *flog-r<Space>*

  Start a command line with ":Floggit rebase ".

==============================================================================
OPTIONS                                                         *flog-options*

g:flog_default_arguments                            *g:flog_default_arguments*

  A |dict| containing the default values for arguments to |:Flog|. Keys in the
  dictionary are in underscore format.

g:flog_permanent_default_arguments        *g:flog_permanent_default_arguments*

  Like |g:flog_default_arguments|, only the arguments are treated as the
  plugin defaults and can't be cleared using |:Flog|, |:Flogsetargs|, or
  |:Flogsetargs!|.

  Has lower presidence than |g:flog_default_arguments|.

g:flog_build_log_command_fn                      *g:flog_build_log_command_fn*

  A string referring to a function to use to build a custom "git log" command.
  Through this argument, you can use a custom visualizer.

  Example:
>
  " This is the same as the built-in log command (flog#build_log_command)
  function! FlogBuildLog() abort
    " Same as "git --git-dir=" . flog#get_fugitive_git_dir()
    " The git dir will be the current buffer's ".git" directory
    let l:command = flog#get_fugitive_git_command()
    let l:command .= ' log'
    " Args and paths that would normally be passed to "git log" based on Flog options
    let l:command .= flog#build_log_args()
    let l:command .= ' -- '
    let l:command .= flog#build_log_paths()

    return l:command
  endfunction

  let g:flog_build_log_command_fn = 'FlogBuildLog'

g:flog_use_ansi_esc                                      *g:flog_use_ansi_esc*

  By default, Flog uses limited regex syntax highlighting. This option enables
  terminal coloring using the AnsiEsc script.

  For more details, help and installation, see AnsiEsc:
  <https://github.com/vim-scripts/AnsiEsc.vim>

==============================================================================
FUNCTIONS                                                     *flog-functions*

                                                          *flog#run_command()*
flog#run_command({command}[, {keep-focus}[, {should-update}[, {is-tmp}]]])

  Runs a command in the graph.

  {command} is the command that is run in the graph. The command will be
  formatted according to |flog-command-format|.

  By default, focus returns to the graph window after running the command.
  {keep-focus} allows the command to retrain focus.

  {should-update} updates the graph after running the command.

  {is-tmp} causes the window to run in a |flog-temp-window|.

  Example:
>
    flog#run_command('Git show %h')
<

                                                      *flog#run_tmp_command()*
flog#run_tmp_command({command}[, {keep-focus}[, {should-update}]])

  Same as |flog#run_command()|, but always open the command in a
  |flog-temp-window|.

                                                      *flog#run_raw_command()*
flog#run_raw_command({command}[, {keep-focus}[, {should-update}[, {is-tmp}]]])

  Same as |flog#run_command()|, but do not format {command}.

==============================================================================
AUTOCOMMANDS                                               *flog-autocommands*

                                                     *User_FlogCmdBufferSetup*
FlogCmdBufferSetup          On initializing any command buffer.
                            See also |flog#run_command()|.

                                                  *User_FlogTmpCmdBufferSetup*
FlogTmpCmdBufferSetup       On initializing a temporary command buffer.
                            Called after |User_FlogCmdBufferSetup|.
                            See also |flog-temp-window|, |flog#run_command()|.

                                               *User_FlogNonTmpCmdBufferSetup*
FlogNonTmpCmdBufferSetup    On initializing a non-temporary command buffer.
                            Called after |User_FlogCmdBufferSetup|.
                            See also |flog-temp-window|, |flog#run_command()|.

==============================================================================
ABOUT                                                             *flog-about*

------------------------------------------------------------------------------
TEMPORARY WINDOWS                                           *flog-temp-window*

  To view more information from commits in the graph, you can open temporary
  windows. Opening a command in Flog temp windows closes any previously opened
  temp windows. Temp windows will be closed when quitting Flog.

------------------------------------------------------------------------------
COMMIT MARKS                                               *flog-commit-marks*

  Flog allows marking commits. Marked commits persist even when the graph
  buffer updates.

  Marked commits can be referenced using |flog-command-format|. Marked commits
  can be created with |flog-m|. A commit mark can be jumped to with |flog-'|.

  The following special commit marks exist.

                                                                     *flog-''*
  ''                    The last commit before jumping to another commit.
                        This mark is set by various commands and mappings.

                                                                     *flog-'<*
  '<                    The start of the visual selection.

                                                                     *flog-'>*
  '>                    The end of the visual selection.

                                                                     *flog-'@*
  '@                    The current HEAD.

                                                                     *flog-'~*
                                                                     *flog-'^*
  '~ '^                 The parent of the current HEAD.

                                                                     *flog-'!*
  '!                    The commit last used in a command with "%h".
                        This mark is set by various commands and mappings.
                        Can be thought of as the "last used commit".

------------------------------------------------------------------------------
COMMAND FORMAT                                           *flog-command-format*

  When running commands with |flog#run_command()|, a special syntax similar to
  |printf| is used to transform the command string.

  Items prefixed by the "%" character are resolved into commit information and
  Flog options.

  If any items cannot be resolved, such as if the graph buffer is empty or the
  item uses an option like "-path" that was not set, commands will not be run.

  The following items are supported:

                                                                     *flog-%%*
  %%                    A literal "%" character.

                                                                     *flog-%h*
  %h                    The hash of the commit under the cursor, if any.
                        Using this in a command sets |flog-'!| to the commit.

                                                                     *flog-%H*
  %H                    Same as %h, but do not set |flog-'!|.

                                                                 *flog-%(h'x)*
  %(h'x)                The hash at the given commit mark "x".
                        See also |flog-commit-marks|.

                                                                     *flog-%b*
  %b                    The first branch of the commit under the cursor, if
                        any. Local branches prioritized first. Useful for
                        checking out branches.

                                                                 *flog-%(b'x)*
  %(b'x)                The branch at the given commit mark "x".

                                                                     *flog-%l*
  %l                    The first branch of the commit under the cursor, if
                        any. Local branches prioritized first. If a remote
                        commit is used, trim the remote name from the branch.
                        Useful for checking out commits for tracking.

                                                                 *flog-%(l'x)*
  %(l'x)                The local branch at the given mark "x".

                                                                     *flog-%p*
  %p                    The arguments passed to the |:Flog| "-path" option, if
                        any, escaped and joined together by spaces. 

                                                                     *flog-%t*
  %t                    A tree for the current index. When this is used, a new
                        tree will be created for the current index using
                        "git write-tree" before the command is run. This is
                        useful for diffing unstaged files with "git add -N".

 vim:tw=78:ts=8:ft=help
